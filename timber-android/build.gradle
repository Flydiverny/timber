apply plugin: 'com.android.library'
apply plugin: 'checkstyle'
apply plugin: 'com.github.dcendents.android-maven'

task checkstyle(type: Checkstyle) {
  configFile rootProject.file('checkstyle.xml')
  source 'src/main/java'
  ignoreFailures false
  showViolations true
  include '**/*.java'

  classpath = files()
}

afterEvaluate {
  if (project.tasks.findByName('check')) {
    check.dependsOn('checkstyle')
  }
}

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
  }
}

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  defaultConfig {
    minSdkVersion rootProject.ext.minSdkVersion
    consumerProguardFiles 'consumer-proguard-rules.pro'
  }
}

configurations {
  lintChecks
}

dependencies {
  compile project(':timber-core')

  testCompile deps.festandroid
  testCompile deps.festassert
  testCompile deps.junit
  testCompile deps.robolectric

  lintChecks project(path: ':timber-lint', configuration: 'lintChecks')
}

task copyLintJar(type: Copy) {
  from(configurations.lintChecks) {
    rename { 'lint.jar' }
  }
  into 'build/intermediates/lint/'
}

task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}

task javadoc(type: Javadoc) {
  failOnError  false
  source = android.sourceSets.main.java.sourceFiles
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
    archives javadocJar
}

project.afterEvaluate {
  def compileLintTask = project.tasks.find { it.name == 'compileLint' }
  compileLintTask.dependsOn(copyLintJar)
}
